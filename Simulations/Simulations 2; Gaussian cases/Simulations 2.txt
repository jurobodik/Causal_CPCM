#Code for Simulations 2, Gaussian case
#Function CPCM_graph_estimate can be found in file "CPCM_graph_estimate (main function)"
#Implementations of other methods in file "baselines_from_Natasha"  
#Data generations in file "data_generators"  

library(copula)
library(boot)
library("evd")
library("mgcv")
library("gamlss")
library(CondIndTests)
library("twosamples")
library(tidyverse)
library(kSamples)
library(independence)
library(Pareto)
library(dHSIC)
library(rje)
library(stringr)

#The following code generates the first column in the table with X = sample_AN(n)

set.seed(0)
transmission_for_CPCM <- function(x){ #return 1 if 1-->2, return 0 if 2-->1
  2-as.numeric(substr(x[3,],1,1))
}


transmission_for_loci <- function(x){ #return 1 if x>0, return 0 otherwise
  return(ifelse(x>0, 1, 0))
}

transmission_for_heci <- function(x){ #return 1 if x>0, return 0 otherwise
  return(ifelse(x[[1]]==TRUE, 1, 0))
}




n=1000
r1=0;r2=0;r3=0;r4=0;r5=0;r6=0;r7=0;r8=0;r9=0
for (i in 1:100) {
  
    X = sample_AN(n) #AN is short for ANMg, i.e. additive noise model with \mu generated via Gaussian processes method
    x = data.frame(X)$x_pa; y=data.frame(X)$x_child
    
    r1=r1+ transmission_for_CPCM(CPCM_graph_estimate(X, family = "Gaussian", force_estimate = TRUE))
  # r2=r2+ ResitWrap(X)$cd
    r3=r3+  QCCD(X, m=3)$cd
  # r4=r4+  CAMWrapper(X)$cd
    r5=r5+  SlopeWrap(X)$cd
    r6=r6+  IGCIWrap_G(X)$cd
    r7=r7+  IGCIWrap_Unif(X)$cd
    r8=r8+  transmission_for_heci(my_module$HECI(as.array(x), as.array(y)))
  # r9=r9+  transmission_for_loci(my_module$loci(as.array(x), as.array(y)))#We suggest running this line separatelly since it takes a long time to run (about 2 hours). It seems that it is much slower in R than in Python

cat("Time remaining", 100- i, "\n")
}


r1/i
r2/i
r3/i
r4/i
r5/i
r6/i
r7/i
r8/i
r9/i

#For other columns, change as follows (we rewrote the results by hand)
#Second column, choose X = sample_ANs(n)
#Third column, choose X = sample_MN_u(n)
#Fourth column, choose X = sample_LS(n)
#Fifth column, choose X = sample_LSs(n)

