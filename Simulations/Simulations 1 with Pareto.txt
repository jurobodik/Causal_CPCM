set.seed(1)
#####################Simulations 1 main idea################################
#####################The graph from the paper is generated via the code starting at line ???
alpha = 0
n=300

#generating random variable X given a density function f. MCMC approach, see https://stats.stackexchange.com/questions/86909/how-to-generate-random-variables-from-a-defined-density-via-r
m=100000
f<-function(x) 1.676875028178700/(x^2*(log(x)+1) )
M=1.7
u=runif(m,1,50)
vysledok=c()
for (i in 1:m) {
  
  y=f(u[i])/M
  if(sample(c(0,1), prob=c(y, 1-y), size=1)==0)(
    vysledok=c(vysledok, i)
    
  )
  
  
}

X=u[vysledok]
X = X[1:n] #We generated X
###Now generate Y given X
Y=c()
for (i in 1:n) {
  theta=X[i]^(alpha)*log(X[i])+1
  y=rPareto(1, 1,theta)
  Y=c(Y,y)
}

plot(X~Y)


Z1 = as.data.frame(X)
Z2 = as.data.frame(Y)
CPCM_graph_estimate(data.frame(Z1, Z2), family = "Pareto", force_estimate=FALSE)




#####################The same but repeating many times################################
generate_our_data <- function(n=1000, alpha){
  
  m=100000
  f<-function(x) 1.676875028178700/(x^2*(log(x)+1) )
  M=1.7
  u=runif(m,1,50)
  vysledok=c()
  for (i in 1:m) {
    
    y=f(u[i])/M
    if(sample(c(0,1), prob=c(y, 1-y), size=1)==0)(
      vysledok=c(vysledok, i)
      
    )
    
    
  }###
  
  X=u[vysledok]
  X = X[1:n]
  
  Y=c()
  for (i in 1:n) {
    theta=X[i]^(alpha)*log(X[i])+1
    y=rPareto(1, 1,theta)
    Y=c(Y,y)
  }
  return(data.frame(X,Y))
}


Encode_output_of_causal_estimation_to_numbers <- function(x){
  if (x=="1 --> 2") {return(1)}
  if (x=="2 --> 1") {return(2)}
  if (x=="Unidentifiable") {return(0)}
  if (x=="Independence") {return(10)}
  return("Ajaj, something is wrong :(")
}


number_of_repetitions = 50

final_result = c()
for (alpha in c(-2, 0, 2)) {
  result = c()
  for (i in 1:number_of_repetitions) {
    X = generate_our_data(n=300, alpha)
    graph = CPCM_graph_estimate(X, family = "Pareto")
    result = c(result, Encode_output_of_causal_estimation_to_numbers(graph[3,]))
    cat("Time remaining:", number_of_repetitions-i, "\n")
  }
  
  final_result = rbind(final_result, result)
  
}


firstline = c()
for (i in 1:9) {
  firstline = c(firstline,  sum(final_result[i,]  == 0)  ) 
}

secondline = c()
for (i in 1:9) {
  secondline = c(secondline,  sum(final_result[i,]  == 1)  ) 
}

thirdline = c()
for (i in 1:9) {
  thirdline = c(thirdline,  sum(final_result[i,]  == 10)  ) 
}


fourthline = c()
for (i in 1:9) {
  fourthline = c(fourthline,  sum(final_result[i,]  == 2)  ) 
}




plot(
  secondline/number_of_repetitions ~ c(-2, 0, 2),
  type = "l",
  col = "black",
  lwd = 3,
  lty=1,
  xlab = expression(alpha),
  ylab = "Ratio",
  main = "Estimation of causal direction with n=300",
  cex.main = 1.2,
  cex.lab = 1.2,
  cex.axis = 1.2, 
  ylim=c(0,1)
)
lines(
  thirdline/number_of_repetitions ~ c(-2, 0, 2),
  type = "l",
  col = "blue",
  lwd = 3,
  lty=2
)


lines(
  fourthline/number_of_repetitions ~ c(-2, 0, 2),
  type = "l",
  col = "red",
  lwd = 3,
  lty=3
)


lines(
  firstline/number_of_repetitions ~ c(-2, 0, 2),
  type = "l",
  col = "green",
  lwd = 3,
  lty=4
)


lines(
  c(0,0,0) ~ c(-2, 0, 2),
  type = "l",
  col = "yellow",
  lwd = 3,
  lty=5
)



legend(
  "left",
  col = c("black", "blue", "red", "green", "yellow"),
  legend = c("X1-->X2", "Empty graph", "X2-->X1", "Unidentifiability", "Unplausible"),
  lty = c(1,2,3,4),
  lwd = 3,
  cex = 0.95,
  box.lty = 0, 
  title="Final estiamtion"
)
