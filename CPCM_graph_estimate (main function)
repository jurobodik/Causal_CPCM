#This is the code for the main function that estimates the causal graph via CPCM, called CPCM_graph_estimate(X, family). 
#An important step is to estimate epsilons (step one of the algorithm). For that, we assume a model with family F = distribution with q parameters
#Choices for F are: "Gaussian", "Gaussian with fixed sigma", "Pareto", "Gamma", "Gamma  with fixed scale", "Gumbel", "Gumbel with fixed scale"
#We always used "gam" function from "MGCV" package for the smooth parameter estimation. 
#If you want different family than already coded or different method than implemented, it is easy! For that,
#simply add into function "estimate_epsilon(Y, X, family="YOUR DISTRIBUTION FUNCTION")" a code how you want to estimate your epsilons

library(copula)
library(boot)
library(MASS)
library("evd")
library("mgcv")
library("gamlss")
library(Pareto)
library(dHSIC)
library(rje)
library(stringr)
library(ExtremeRisks)
library(EnvStats)

##################################   Example   ###########################################
#set.seed(42)
#n=500
#X1 = rnorm(n)
#X2=c();
#for (i in 1:n) {
#  X2 = c(X2, rnorm(1, X1[i], X1[i]^2+1))
#}
#X= data.frame(X1, X2)
#CPCM_graph_estimate(X, family = c("Gaussian", "Gaussian"), force_estimate=FALSE) #First "Gaussian" is for direction 2-->1 , Second for direction 1-->2
#>                       Causal results (p-values)
#> p-value 1-->2                 0.739182842730139
#> p-value 2-->1                0.0193744782880139
#> Causal graph estimate                   1 --> 2


############################ CPCM estimation of the causal graph ##########################


CPCM_graph_estimate <- function(X, family, force_estimate = FALSE, showing_computing_time=TRUE, accuracy = 0.0025){
  lambda = 2 #penalty for more edges, does not apply for bivariate case
  n = length(X[,1])
  if(length(family)==1){family = rep(family, ncol(X))}
  ##################Just some functions. Note especially estimate_epsilon function, that specifies how we estimate theta under different F
  estimate_epsilon<-function(Y, X, family="Gaussian"){ 
    
    ### ### ### ### ### ### ### ###
    rename_columns_to_1_to_q <-function(X){ #Just making sure that our variables are called X1, X2, ...
      if (is.null(nrow(X))) {X = as.data.frame(X); names(X)[1] <- "X1"; return(X) }
      return(X %>% rename_with(~ str_c("X", seq_along(.))))
    }
    X = rename_columns_to_1_to_q(X)
    names(Y)<- "Y"
    ### ### ### ### ### ### ### ###
    formula <- function(X, withY=TRUE){ #Definition of formula. We want to distinguish between discrete and continous variables for GAM. But anyway this function basically returns "Y~s(X1) + s(X2)+...+s(Xq)"
      q = ncol(X); if (is.null(nrow(X))) {q=1} 
      if(withY==TRUE){ form="Y ~ "}
      if(withY==FALSE){form=" ~ "}
      for (i in 1:q) {#Discrete variable is if it contains <=9 different values
        if (  length(unique(X[,i]))>9  ) { 
          form=paste(form, paste0("s(X", i,  ")+")) 
        }
        if (  length(unique(X[,i]))<=9  ) {  form=paste(form, paste0("as.factor(X", i,  ")+"))  }
      }
      
      form=as.formula(  substr(form,1,nchar(form)-1)  )
      return(form)
    }
    ### ### ### ### ### ### ### ### Here we start with the estimation of epsilons for each family separately.### ### ### ### ### ### ### ###
    
    
    if (family=="Gaussian") {
      
      fit=  gam(list(formula(X, TRUE),formula(X, FALSE)), data.frame(Y,X) ,family=gaulss(), link=list("identity","logb"))
      
      give_me_epsilons_from_GAULSS <-function(Y, fit){ #Note that GAM with GAULSS family does not estimate mu and sigma, but mu and 1/sigma. Thats why this is here
        residuals=c()
        for (i in 1:length(Y)) {
          residuals=c(residuals,  (Y[i] -fit$fitted.values[i,1])*(fit$fitted.values[i,2]) ) #fit$fitted.values[i,2]=1/sigma[i], fit$fitted.values[i,1]=mu[i]
        }
        return(residuals)
      }
      
      residual = give_me_epsilons_from_GAULSS(Y, fit)
      residual=pnorm(residual)
      
      
      return(residual)
    }
    
    if (family=="Gaussian with fixed sigma") {
      
      fit=  gam(list(formula(X, TRUE),~1), data.frame(Y,X) ,family=gaulss(), link=list("identity","logb"))
      
      give_me_generalized_residuals_from_gaulss <-function(Y, fit){
        residuals=c()
        for (i in 1:length(Y)) {
          residuals=c(residuals,  (Y[i] -fit$fitted.values[i,1])*(fit$fitted.values[i,2]) ) #fit$fitted.values[i,2]=1/sigma[i], fit$fitted.values[i,1]=mu[i]
        }
        return(residuals)
      }
      
      residual = give_me_generalized_residuals_from_gaulss(Y, fit)
      residual=pnorm(residual)
      
      
      return(residual)
      
    }
    
    
    
    if (family=="Pareto") {
      
      Y=-log(log(Y))
      fit=  gam(list(formula(X, TRUE), ~1), data.frame(Y,X) ,family=gumbls())
      residual=c()
      for (i in 1:n) {
        residual=c(residual,  pgumbel(Y[i], fit$fitted.values[i,1], 1)  )
      }
      
      
      return(residual)
      
    }
    if (family=="Gumbel") {
      
      fit=  gam(list(formula(X, TRUE), formula(X, FALSE)), data.frame(Y,X) ,family=gumbls())
      residual=c()
      for (i in 1:n) {
        residual=c(residual,  pgumbel(Y[i], fit$fitted.values[i,1], exp(fit$fitted.values[i,2]))  )
      }
      
      return(residual)
      
    }
    
    if (family=="Gumbel with fixed scale") {
      
      fit=  gam(list(formula(X, TRUE), ~1), data.frame(Y,X) ,family=gumbls())
      residual=c()
      for (i in 1:n) {
        residual=c(residual,  pgumbel(Y[i], fit$fitted.values[i,1], exp(fit$fitted.values[i,2]))  )
      }
      
      return(residual)
      
    }
    
    
    
    if (family=="Gamma") {
      
      fit=  gam(list(formula(X, TRUE),formula(X, FALSE)), data.frame(Y,X) ,family=gammals())
      
      give_me_generalized_residuals_from_gammals <-function(Y, fit){
        residuals=c()
        for (i in 1:length(Y)) {
          residuals=c(residuals,  pgamma( Y[i], shape = 1/exp(fitted(fit)[i,2]), scale = fitted(fit)[i,1]*exp(fitted(fit)[i,2])   ) ) 
        }
        return(residuals)
      }
      
      return(give_me_generalized_residuals_from_gammals(Y, fit))
      
    }
    
    if (family=="Gamma with fixed scale") {
      
      fit=  gam(list(formula(X, TRUE),~1), data.frame(Y,X) ,family=gammals())
      
      give_me_generalized_residuals_from_gammals <-function(Y, fit){
        residuals=c()
        for (i in 1:length(Y)) {
          residuals=c(residuals,  pgamma( Y[i], shape = 1/exp(fitted(fit)[i,2]), scale = fitted(fit)[i,1]*exp(fitted(fit)[i,2])   )) 
        }
        return(residuals)
      }
      
      residual = give_me_generalized_residuals_from_gammals(Y, fit)
      
      
      return(residual)
      
    }
    
    
    
    return(  "Family not implemented, sorry.")
    
  }
  
  make_all_dags_on_three_nodes <-function(){#I am sorry about this monstrosity. Thanks chatGPT for generating it
    all_dags = list()
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   0,0,0,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,1,0,   0,0,0,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,1,0,   0,0,1,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,1,0,   0,0,0,    0,1,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,1,0,   0,0,0,    1,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,1,0,   0,0,0,    1,1,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,1,1,   0,0,0,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,1,1,   0,0,1,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,1,1,   0,0,0,    0,1,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,1,   0,0,1,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,1,   0,0,0,    0,1,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,1,   1,0,0,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,1,   1,0,1,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,1,   0,0,0,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   1,0,0,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   0,0,1,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   0,0,0,    1,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   0,0,0,    0,1,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   1,0,0,    0,1,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   1,0,0,    1,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   1,0,0,    1,1,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   1,0,1,    0,1,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   0,0,0,    1,1,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   1,0,1,    1,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    all_dags[[length(all_dags)+1]] = matrix(c(0,0,0,   1,0,1,    0,0,0), nrow = 3, ncol = 3, byrow = TRUE)
    
    return(all_dags)}
  all_dags = make_all_dags_on_three_nodes()
  
  from_matrix_to_values<-function(variable, dag){
    if (variable ==1) {
      if (all(dag[,variable]==c(0,0,0))) {return(1)}
      else if (all(dag[,variable]==c(0,1,0))) {return(2)}
      else if (all(dag[,variable]==c(0,0,1))) {return(3)}
      else if (all(dag[,variable]==c(0,1,1))) {return(4)}
    }
    if (variable ==2) {
      if (all(dag[,variable]==c(0,0,0))) {return(1)}
      else if (all(dag[,variable]==c(1,0,0))) {return(2)}
      else if (all(dag[,variable]==c(0,0,1))) {return(3)}
      else if (all(dag[,variable]==c(1,0,1))) {return(4)}
    }  
    if (variable ==3) {
      if (all(dag[,variable]==c(0,0,0))) {return(1)}
      else if (all(dag[,variable]==c(1,0,0))) {return(2)}
      else if (all(dag[,variable]==c(0,1,0))) {return(3)}
      else if (all(dag[,variable]==c(1,1,0))) {return(4)}
    }  
    
    
  }
  res=c(); #res = final result
  ##################We coded it only for d=2 and d=3 using ugly brute-force
  #BIVARIATE CASE
  if (ncol(X)==2) { 
    X1 = X[,1]; X2 = X[,2]
    
    if (force_estimate == FALSE){
      if (length(X1)>500) { indep = hoeffding.D.test(X1, X2, na.rm = TRUE, collisions = FALSE, precision = 1e-05) }
      else { indep=dhsic.test(data.frame(X1, X2))}
      
      if(indep$p.value>=0.05) {res =  as.data.frame(c("-", "-", "Independence"));     colnames(res)<-c("Causal results (p-values)");    rownames(res)<-c("p-value 1-->2", "p-value 2-->1", "Causal graph estimate")
      return(res)   }
    }
    
    
    
    
    Y= X2; X = data.frame(X1=  X1);fam = family[2]
    r2= estimate_epsilon(Y, X, fam)
    Y= X1; X = data.frame(X1=  X2);fam = family[1]
    r1= estimate_epsilon(Y, X, fam)
    
    
    z1=hoeffding.D.test(r2, X1, na.rm = TRUE, collisions = FALSE, precision = 1e-05)$p.value
    z2=hoeffding.D.test(r1, X2, na.rm = TRUE, collisions = FALSE, precision = 1e-05)$p.value
    
    if (z1>=z2) res="1 --> 2"
    if (z1<z2) res="2 --> 1"
    
    if (force_estimate == FALSE) {
      if(z1>0.05 & z2>0.05) res="Unidentifiable" 
      if (z1<0.05 & z2<0.05) res = "Unplausible"
    }
    
    
    res=as.data.frame(c(z1, z2, res))
    colnames(res)<-c("Causal results (p-values)")
    rownames(res)<-c("p-value 1-->2", "p-value 2-->1", "Causal graph estimate")
    return(res)
  }
  
  #TRIVARIATE CASE
  if (ncol(X)==3) {
    X1 = X[,1]; X2 = X[,2]; X3 = X[,3]
    r123=estimate_epsilon(Y= X1, X=data.frame(X1=  X2  , X2=  X3  ), family = family[1])
    r12=estimate_epsilon(Y= X1, X=data.frame(X1=  X2   ), family = family[1])
    r13=estimate_epsilon(Y= X1, X=data.frame(X1=   X3  ), family = family[1])
    
    r213=estimate_epsilon(Y= X2, X=data.frame(X1=  X1  , X2=  X3  ), family = family[2])
    r21=estimate_epsilon(Y= X2, X=data.frame(X1=  X1   ), family = family[2])
    r23=estimate_epsilon(Y= X2, X=data.frame(X1=  X3  ), family = family[2])
    
    r312=estimate_epsilon(Y= X3, X=data.frame(X1=  X1  , X2=  X2  ), family = family[3])
    r31 =estimate_epsilon(Y= X3, X=data.frame(X1=  X1 ), family = family[3])
    r32 =estimate_epsilon(Y= X3, X=data.frame(X1=  X2 ), family = family[3])
    
    
    A = data.frame(X1, r12, r13, r123)
    B = data.frame(X2, r21, r23, r213)
    C = data.frame(X3, r31, r32, r312)
    
    p_values = c(); p_values_adjusted = c()
    k = length(all_dags)
    for (i in 1:length(all_dags)) {
      if(showing_computing_time==TRUE){cat("Time remaining:",k, "\n"); k=k-1}
      dag = all_dags[[i]]
      p_value =  multIndepTest(data.frame(A[from_matrix_to_values(1,dag)], 
                                          B[from_matrix_to_values(2, dag)], 
                                          C[from_matrix_to_values(3, dag)]) , 
                               d=c(1,1,1), verbose = FALSE, N=as.integer(1/(2*accuracy)-1) )$fisher.pvalue
      if(p_value<=accuracy){p_value = 0}
      p_values = c(p_values,  p_value)
      p_values_adjusted = c(p_values_adjusted, -log(p_value) + lambda*sum(dag))
    }
    
    M_best = all_dags[[ which.min(p_values_adjusted)    ]]
    M_plausible = list()
    plausible = 1:length(all_dags); plausible = plausible[p_values>0.01]
    for (i in which(p_values > 0.01)[order(p_values_adjusted[plausible])]) {
      M_plausible = c(M_plausible, list(all_dags[[i]]))
    }
    
    
    return(list(plausible=M_plausible, p_values=p_values, p_values_adjusted=p_values_adjusted, result=M_best))
    
  }
  
  if (ncol(X)!=2 && ncol(X)!=3) {
    return("Sorry, the code is avaliable only for d<=3 for now")
  }
}
